{"version":3,"file":"static/js/856.9a59f79b.chunk.js","mappings":"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","sources":["webpack://my-app/./src/components/Profile/MyPosts/Post/MyPost.module.sass?e234","components/Profile/MyPosts/Post/MyPost.tsx","webpack://my-app/./src/components/Profile/MyPosts/MyPosts.module.css?831b","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","webpack://my-app/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://my-app/./src/components/Profile/Profile.module.css?b512","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","hoc/withAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"post_block\":\"MyPost_post_block__h46yV\",\"post\":\"MyPost_post__o2m+Q\",\"post_text\":\"MyPost_post_text__S04eq\"};","import React from 'react';\r\nimport s from './MyPost.module.sass';\r\nimport { Avatar, Checkbox, FormControlLabel } from '@material-ui/core';\r\nimport { Favorite, FavoriteBorder } from '@material-ui/icons';\r\nimport { PhotosType, PostType } from '../../../../types/types';\r\n\r\ntype MyPostPropsType = {\r\n  photo?: string;\r\n};\r\n\r\nconst MyPost: React.FC<PostType & MyPostPropsType> = (props) => {\r\n  return (\r\n    <div className={s.post_block}>\r\n      <div className={s.post}>\r\n        <Avatar src={props.photo} alt=\"Аватарка\" />\r\n        <FormControlLabel\r\n          control={\r\n            <Checkbox\r\n              icon={<FavoriteBorder />}\r\n              checkedIcon={<Favorite />}\r\n              name=\"checkedH\"\r\n            />\r\n          }\r\n          label={props.like}\r\n        />\r\n      </div>\r\n      <div className={s.post_text}>{props.message}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MyPost;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"posts_form\":\"MyPosts_posts_form__CVZd9\",\"posts\":\"MyPosts_posts__sid0u\",\"posts_item\":\"MyPosts_posts_item__N-s8+\",\"button_block\":\"MyPosts_button_block__0GGi2\",\"posts_textarea\":\"MyPosts_posts_textarea__EFf3S\",\"posts_button\":\"MyPosts_posts_button__KmLLS\",\"button_size\":\"MyPosts_button_size__M5Xh9\",\"postsBlock1\":\"MyPosts_postsBlock1__G5JY1\",\"postsBlock\":\"MyPosts_postsBlock__e6ywc\"};","import React from 'react';\r\nimport MyPost from './Post/MyPost';\r\nimport s from './MyPosts.module.css';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form';\r\nimport validators from '../../../utils/validators/validators';\r\nimport { Textarea } from '../../common/FormsControls/FormsControls';\r\nimport { PostType } from '../../../types/types';\r\nimport { Button } from '../../common/Button/Button';\r\n\r\nexport type MyPostsType = {\r\n  posts: Array<PostType>;\r\n  addPost: (formData: string) => void;\r\n  isAuth: boolean | null;\r\n  photo?: string;\r\n};\r\n\r\nconst maxLength40 = validators.maxLengthCreator(40);\r\n\r\nconst MyPosts = React.memo(({ posts, addPost, isAuth, photo }: MyPostsType) => {\r\n  let newPosts = posts.map((p) => (\r\n    <MyPost\r\n      key={p.id}\r\n      id={p.id}\r\n      message={p.message}\r\n      like={p.like}\r\n      photo={photo}\r\n    />\r\n  ));\r\n\r\n  const onSubmit = (value: PostsFormType) => {\r\n    addPost(value.newPostText);\r\n  };\r\n\r\n  if (!isAuth) return <Redirect to={'/login'} />;\r\n\r\n  return (\r\n    <div className={s.posts}>\r\n      <PostsFormRedux onSubmit={onSubmit} />\r\n      <div className={s.posts_item}>{newPosts}</div>\r\n    </div>\r\n  );\r\n});\r\n\r\nexport type PostsFormType = {\r\n  newPostText: string;\r\n};\r\n\r\nexport const PostsForm: React.FC<InjectedFormProps<PostsFormType>> = (\r\n  props\r\n) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <div className={s.posts_form}>\r\n        <Field\r\n          component={Textarea}\r\n          name={'newPostText'}\r\n          placeholder={'Empty'}\r\n          className={s.posts_textarea}\r\n          validate={[validators.requiredField, maxLength40]}\r\n        />\r\n        <div className={s.button_block}>\r\n          <Button style={s.button_size}>Add post</Button>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport const PostsFormRedux = reduxForm<PostsFormType>({\r\n  form: 'newPostText',\r\n})(PostsForm);\r\n\r\nexport default MyPosts;\r\n","import React from 'react';\r\nimport profileActionsAndReducer from '../../../redux/profile-reducer';\r\nimport MyPosts from './MyPosts';\r\nimport { connect } from 'react-redux';\r\nimport { RootState } from '../../../redux/redux-store';\r\nimport { PostType } from '../../../types/types';\r\n\r\ntype mapStateToPropsType = {\r\n  posts: Array<PostType>;\r\n  isAuth: boolean | null;\r\n  photo?: string;\r\n};\r\n\r\ntype mapDispatchToPropsType = {\r\n  addPost: (newPostText: string) => void;\r\n};\r\n\r\nconst mapStateToProps = (state: RootState): mapStateToPropsType => {\r\n  return {\r\n    posts: state.profilePage.posts,\r\n    isAuth: state.auth.userData.isAuth,\r\n    photo: state.profilePage.profile?.photos.small,\r\n  };\r\n};\r\n\r\nexport const MyPostsContainer = connect<\r\n  mapStateToPropsType,\r\n  mapDispatchToPropsType,\r\n  {},\r\n  RootState\r\n>(mapStateToProps, {\r\n  addPost: profileActionsAndReducer.addPost,\r\n})(MyPosts);\r\n","// extracted by mini-css-extract-plugin\nexport default {\"profile\":\"ProfileInfo_profile__d2txi\",\"profile_info\":\"ProfileInfo_profile_info__4ywHt\",\"info_name\":\"ProfileInfo_info_name__c6ytw\",\"contact\":\"ProfileInfo_contact__UoBZp\",\"avatar\":\"ProfileInfo_avatar__Kdoz-\",\"button_block\":\"ProfileInfo_button_block__G+ezY\",\"button_block_dialogs\":\"ProfileInfo_button_block_dialogs__PuWS3\",\"profile_info_button\":\"ProfileInfo_profile_info_button__KPZVm\"};","import s from './ProfileInfo.module.css';\r\nimport React, { useState } from 'react';\r\nimport Preloader from '../../common/Preloader/Preloader';\r\nimport avatar from './../../../assets/images/base-avatar.jpg';\r\nimport { ProfileStatusWithHook } from './ProfileInfoStatus/ProfileStatusWithHook';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { ProfileInfoDescription } from './ProfileInfoDescription/ProfileInfoDescription';\r\nimport { ProfileType } from '../../../types/types';\r\nimport { Button } from '../../common/Button/Button';\r\n// import m from './../../common/Button/Button.module.sass';\r\n\r\nexport type ProfileInfoType = {\r\n  profile: ProfileType;\r\n  status: string;\r\n  updateStatus: (status: string) => void;\r\n  isOwner: boolean;\r\n  savePhoto?: (photo: string) => void;\r\n  updateProfile: (dataForm: ProfileType) => any;\r\n  refreshProfile: () => void;\r\n};\r\n\r\nexport const ProfileInfo: React.FC<ProfileInfoType> = ({\r\n  isOwner,\r\n  profile,\r\n  status,\r\n  updateStatus,\r\n  savePhoto,\r\n  updateProfile,\r\n}) => {\r\n  //достаем значения из объекта и складываем в массив\r\n  //фильтруем массив\r\n  //возвращаем разметку со значениями из массива\r\n\r\n  let [editMode, setEditMode] = useState<boolean>(false);\r\n  //более правильное решение: создать флаг в бизнесе и менять\r\n  //режим редактирования в соответсствии с его значением\r\n  let submitProfileInfoReduxForm = (dataForm: ProfileType) => {\r\n    updateProfile(dataForm).then(() => setEditMode(!editMode));\r\n  };\r\n\r\n  if (!profile) return <Preloader />;\r\n\r\n  return (\r\n    <div className={s.profile}>\r\n      <div className={s.profile_info}>\r\n        <div className={s.avatar}>\r\n          <img src={profile.photos.large || avatar} alt=\"user avatar\" />\r\n        </div>\r\n        <div className={s.button_block}>\r\n          <Button style={s.profile_info_button}>Follow</Button>\r\n        </div>\r\n      </div>\r\n      <ProfileInfoDescription\r\n        profile={profile}\r\n        status={status}\r\n        updateStatus={updateStatus}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"mainContent\":\"Profile_mainContent__XYjK2\"};","import React from 'react';\r\nimport { MyPostsContainer } from './MyPosts/MyPostsContainer';\r\nimport { ProfileInfo } from './ProfileInfo/ProfileInfo';\r\nimport s from './Profile.module.css';\r\n\r\nexport const Profile = ({\r\n  isOwner,\r\n  profile,\r\n  status,\r\n  updateStatus,\r\n  savePhoto,\r\n  updateProfile,\r\n  refreshProfile,\r\n}: any) => {\r\n  return (\r\n    <main className={s.mainContent}>\r\n      <ProfileInfo\r\n        isOwner={isOwner}\r\n        profile={profile}\r\n        status={status}\r\n        updateStatus={updateStatus}\r\n        savePhoto={savePhoto}\r\n        updateProfile={updateProfile}\r\n        refreshProfile={refreshProfile}\r\n      />\r\n      <MyPostsContainer />\r\n    </main>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport profileActionsAndReducer from '../../redux/profile-reducer';\r\nimport { connect } from 'react-redux';\r\nimport { RouteComponentProps, withRouter } from 'react-router-dom';\r\nimport { compose } from 'redux';\r\nimport { RootState } from '../../redux/redux-store';\r\nimport { Profile } from './Profile';\r\nimport { ProfileType } from '../../types/types';\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\r\n\r\nclass ProfileContainer extends React.Component<ProfileContainerType> {\r\n  refreshProfile() {\r\n    let userId = this.props.match.params.userId;\r\n    if (!userId) {\r\n      userId = this.props.authorizedUserId;\r\n      if (!userId) {\r\n        //Не самое лучшее решение, но по-быструхе можно так сделать\r\n        this.props.history.push('/login');\r\n      }\r\n    }\r\n    this.props.getUserProfile(userId);\r\n    this.props.getStatus(userId);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.refreshProfile();\r\n  }\r\n\r\n  componentDidUpdate(\r\n    prevProps: Readonly<ProfileContainerType>,\r\n    prevState: Readonly<{}>,\r\n    snapshot?: any\r\n  ) {\r\n    if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n      this.refreshProfile();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Profile\r\n        {...this.props}\r\n        isOwner={!this.props.match.params.userId}\r\n        profile={this.props.profile}\r\n        status={this.props.status}\r\n        updateStatus={this.props.updateStatus}\r\n        savePhoto={this.props.savePhoto}\r\n        updateProfile={this.props.updateProfile}\r\n        refreshProfile={this.refreshProfile}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\n//typing\r\ntype ParamsType = {\r\n  userId: any;\r\n};\r\n\r\ntype mapStateToPropsType = {\r\n  profile: ProfileType | null;\r\n  status: string;\r\n  authorizedUserId: number | null;\r\n};\r\n\r\ntype mapDispatchToPropsType = {\r\n  getUserProfile: (userId: string) => void;\r\n  getStatus: (userId: string) => void;\r\n  updateStatus: (status: string) => void;\r\n  savePhoto: (photo: string) => void;\r\n  updateProfile: (dataForm: ProfileType) => void;\r\n};\r\n\r\ntype ProfileInfoContainerType = mapStateToPropsType & mapDispatchToPropsType;\r\ntype ProfileContainerType = RouteComponentProps<ParamsType> &\r\n  ProfileInfoContainerType;\r\n//typing\r\n\r\nconst mapStateToProps = (state: RootState): mapStateToPropsType => {\r\n  return {\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userData.id,\r\n  };\r\n};\r\n\r\nexport default compose<React.ComponentType>(\r\n  withRouter,\r\n  withAuthRedirect,\r\n  connect<mapStateToPropsType, mapDispatchToPropsType, {}, RootState>(\r\n    mapStateToProps,\r\n    {\r\n      getUserProfile: profileActionsAndReducer.getUserProfile,\r\n      updateProfile: profileActionsAndReducer.updateProfile,\r\n      getStatus: profileActionsAndReducer.getStatus,\r\n      updateStatus: profileActionsAndReducer.updateStatus,\r\n      savePhoto: profileActionsAndReducer.savePhoto,\r\n    }\r\n  )\r\n)(ProfileContainer);\r\n","import React, { ComponentType } from 'react';\r\nimport { RootState } from '../redux/redux-store';\r\nimport { connect, ConnectedProps } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\ntype MapStatePropsType = {\r\n  isAuth: boolean | null;\r\n};\r\n\r\nconst mapStateToProps = (state: RootState): MapStatePropsType => {\r\n  return {\r\n    isAuth: state.auth.userData.isAuth,\r\n  };\r\n};\r\n\r\nconst connector = connect(mapStateToProps);\r\n\r\nexport function withAuthRedirect<T>(\r\n  Component: ComponentType<T & ConnectedProps<typeof connector>>\r\n) {\r\n  const RedirectComponent: React.FC<T & ConnectedProps<typeof connector>> = (\r\n    props\r\n  ) => {\r\n    const { isAuth, ...restProps } = props;\r\n    if (!isAuth) return <Redirect to={'/login'} />;\r\n    return <Component {...(props as T & ConnectedProps<typeof connector>)} />;\r\n  };\r\n  //@ts-ignore\r\n  return connector(RedirectComponent);\r\n}\r\n"],"names":["props","_jsxs","className","s","children","_jsx","Avatar","src","photo","alt","FormControlLabel","control","Checkbox","icon","FavoriteBorder","checkedIcon","Favorite","name","label","like","message","maxLength40","validators","maxLengthCreator","MyPosts","React","_ref","posts","addPost","isAuth","newPosts","map","p","MyPost","id","PostsFormRedux","onSubmit","value","newPostText","Redirect","to","reduxForm","form","handleSubmit","Field","component","Textarea","placeholder","validate","requiredField","Button","style","MyPostsContainer","connect","state","_state$profilePage$pr","profilePage","auth","userData","profile","photos","small","profileActionsAndReducer","ProfileInfo","isOwner","status","updateStatus","savePhoto","updateProfile","editMode","setEditMode","useState","large","avatar","ProfileInfoDescription","Preloader","Profile","refreshProfile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","componentDidMount","componentDidUpdate","prevProps","prevState","snapshot","render","compose","withRouter","withAuthRedirect","connector","Component","restProps"],"sourceRoot":""}