{"version":3,"sources":["hoc/WithAuthRedirect.js","components/Profile/Profile.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileDataForm.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","module","exports","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","autoFocus","onBlur","updateStatus","onChange","e","currentTarget","value","ProfileDataFormReduxForm","reduxForm","form","handleSubmit","profile","error","onSubmit","className","s","formSummaryError","userName","createField","Input","userInfo","listInfo","type","Textarea","aboutMe","userContact","website","profileInfoContacts","Object","keys","contacts","map","key","contact","ProfileData","isOwner","goToEditMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","contactTitle","contactValue","Contact","ProfileInfo","savePhoto","saveProfile","Preloader","background","userAvatar","src","photos","large","userPhoto","alt","target","files","length","initialValues","formData","then","Post","item","itemLike","like","itemPost","message","maxLength10","maxLengthCreator","MyPosts","memo","postsElements","posts","reverse","m","id","likesCount","postsBlock","AddPostFormRadux","values","addPost","newPostText","postsBlockAdd","postsBlock1","Field","component","name","placeholder","validate","required","postsBlock2","MyPostsContainer","profilePage","dispatch","addPostActionCreator","Profile","mainContent","ProfileContainer","userId","match","params","authorizedUserId","history","push","getUserProfile","getStatus","refreshProfile","prevProps","console","log","compose","withRouter"],"mappings":"sNAIIA,EAA6B,SAACC,GAAD,MAAY,CACzCC,OAAQD,EAAME,KAAKD,SAGTE,EAAmB,SAACC,GAAe,IAEtCC,EAFqC,iLAInC,OAAIC,KAAKC,MAAMN,OAER,kBAACG,EAAcE,KAAKC,OAFG,kBAAC,IAAD,CAAUC,GAAG,eAJR,GAEXC,IAAML,WAYtC,OAFoCM,YAAQX,EAARW,CAAoCL,K,oBCnB7EM,EAAOC,QAAU,CAAC,YAAc,+B,0CCAhCD,EAAOC,QAAU,CAAC,WAAa,4BAA4B,MAAQ,uBAAuB,YAAc,6BAA6B,YAAc,+B,oBCAnJD,EAAOC,QAAU,CAAC,KAAO,mBAAmB,SAAW,uBAAuB,SAAW,uBAAuB,KAAO,qB,wJCkDxGC,EAjDgB,SAACN,GAAW,IAAD,EAERO,oBAAS,GAFD,mBAEjCC,EAFiC,KAEvBC,EAFuB,OAGZF,mBAASP,EAAMU,QAHH,mBAGjCA,EAHiC,KAGzBC,EAHyB,KAQtCC,qBAAW,WACPD,EAAUX,EAAMU,UACjB,CAACV,EAAMU,SAeV,OACI,8BACMF,GACE,6BACI,0BAAMK,cAjBG,WACrBJ,GAAY,KAiBIT,EAAMU,QAAU,cAK3BF,GACG,6BACI,2BAAOM,WAAW,EACVC,OAtBG,WACvBN,GAAY,GACZT,EAAMgB,aAAaN,IAqBCO,SAlBD,SAACC,GACpBP,EAAUO,EAAEC,cAAcC,QAkBNA,MAAOV,O,oDCEpBW,EAHkBC,YAAU,CAAEC,KAAM,gBAAlBD,EAnCT,SAAC,GAAsC,IAApCE,EAAmC,EAAnCA,aAAcC,EAAqB,EAArBA,QAASC,EAAY,EAAZA,MAC9C,OAAO,0BAAMC,SAAUH,GACnB,6BAAK,yCAEJE,GAAS,yBAAKE,UAAWC,IAAEC,kBAAlB,IAAsCJ,EAAtC,KAEV,0BAAME,UAAWC,IAAEE,UAAnB,IAA+BC,YAAY,YAAa,WAAY,GAAIC,MAExE,yBAAKL,UAAWC,IAAEK,UAEd,wBAAIN,UAAWC,IAAEM,UACb,4BACI,kDADJ,IACgCH,YAAY,GAAI,iBAAkB,GAAIC,IAAO,CAAEG,KAAM,cAErF,4BACI,uDADJ,IACqCJ,YAAY,yBAA0B,4BAA6B,GAAIK,MAE5G,4BACI,wCADJ,IACsBZ,EAAQa,QACzBN,YAAY,WAAY,UAAW,GAAIK,QAIpD,yBAAKT,UAAWC,IAAEU,aAAcd,EAAQe,QACpC,wBAAIZ,UAAWC,IAAEY,qBACZC,OAAOC,KAAKlB,EAAQmB,UAAUC,KAAI,SAAAC,GAC/B,OAAO,yBAAKlB,UAAWC,IAAEkB,SACrB,2BAAID,EAAKd,YAAYc,EAAK,YAAcA,EAAK,GAAIb,KAAjD,eCWlBe,EAAc,SAAC,GAAwC,IAAtCvB,EAAqC,EAArCA,QAASwB,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,aACrC,OAAO,oCACFD,QADE,IACFA,IAAW,6BAAK,4BAAQE,QAASD,GAAjB,SAEjB,0BAAMtB,UAAWC,IAAEE,UAAWN,EAAQ2B,UAEtC,yBAAKxB,UAAWC,IAAEK,UAEd,wBAAIN,UAAWC,IAAEM,UACb,4BACI,kDAA2BV,EAAQ4B,eAAiB,MAAQ,MAEhE,4BACK5B,EAAQ4B,gBAAkB,6BAAK,uDAAL,IAAsC5B,EAAQ6B,4BAE7E,4BACI,wCADJ,IACsB7B,EAAQa,WAItC,yBAAKV,UAAWC,IAAEU,aAAcd,EAAQe,QACpC,wBAAIZ,UAAWC,IAAEY,qBACZC,OAAOC,KAAKlB,EAAQmB,UAAUC,KAAI,SAAAC,GAC/B,OAAO,kBAAC,EAAD,CAASA,IAAKA,EAAKS,aAAcT,EAAKU,aAAc/B,EAAQmB,SAASE,YASnFW,EAAU,SAAC,GAAoC,IAAlCF,EAAiC,EAAjCA,aAAcC,EAAmB,EAAnBA,aACpC,OAAO,4BAAI,2BAAID,GAAR,KAA4BC,IAGxBE,EAxEK,SAAC,GAAwE,IAAtEjC,EAAqE,EAArEA,QAASf,EAA4D,EAA5DA,OAAQM,EAAoD,EAApDA,aAAciC,EAAsC,EAAtCA,QAASU,EAA6B,EAA7BA,UAAWC,EAAkB,EAAlBA,YAAkB,EAC1DrD,oBAAS,GADiD,mBACnFC,EADmF,KACzEC,EADyE,KAGxF,IAAKgB,EACD,OAAO,kBAACoC,EAAA,EAAD,MAiBX,OACI,yBAAKjC,UAAWC,IAAEiC,YACd,yBAAKlC,UAAWC,IAAEkC,YACd,yBAAKC,IAAKvC,EAAQwC,OAAOC,OAASC,IAAWC,IAAI,WAChDnB,GAAW,2BAAOb,KAAK,OAAOnB,SAlBf,SAACC,GACrBA,EAAEmD,OAAOC,MAAMC,QACfZ,EAAUzC,EAAEmD,OAAOC,MAAM,QAkBvB9D,EAAW,kBAAC,EAAD,CAAiBgE,cAAe/C,EAASA,QAASA,EAASE,SAd/D,SAAC8C,GACdb,EAAYa,GAAUC,MAClB,WACIjE,GAAY,OAW4EwC,QAASA,IAC/F,kBAAC,EAAD,CAAaC,aAAc,WAAQzC,GAAY,IAASgB,QAASA,IAEvE,kBAAC,EAAD,CAAwBf,OAAQA,EAAQM,aAAcA,M,oDCpBnD2D,EAfF,SAAC3E,GACV,OACI,wBAAI4B,UAAWC,IAAE+C,MACb,yBAAKhD,UAAWC,IAAEgD,UACd,yBAAKb,IAAI,gFAAgFI,IAAI,0FAC7F,0BAAMxC,UAAWC,IAAEiD,MAAnB,QAA+B9E,EAAM8E,OAEzC,yBAAKlD,UAAWC,IAAEkD,UACb/E,EAAMgF,W,gBCJjBC,EAAcC,YAAiB,IAE/BC,EAAUjF,IAAMkF,MAAM,SAAApF,GAExB,IAAIqF,EAAgB,YAAIrF,EAAMsF,OAAOC,UAAU1C,KAAI,SAAA2C,GAAC,OAAI,kBAAC,EAAD,CAAM1C,IAAK9C,EAAMyF,GAAIT,QAASQ,EAAER,QAASF,KAAMU,EAAEE,WAAYD,GAAID,EAAEC,QAK3H,OACI,yBAAK7D,UAAWC,IAAE8D,YACd,wCACA,kBAACC,EAAD,CAAkBjE,SAPT,SAACkE,GACd7F,EAAM8F,QAAQD,EAAOE,gBAOjB,wBAAInE,UAAWC,IAAEyD,OACZD,OAuBXO,EAAmBtE,YAAU,CAAEC,KAAM,yBAAlBD,EAhBJ,SAACtB,GAClB,OACI,0BAAM4B,UAAWC,IAAEmE,cAAerE,SAAU3B,EAAMwB,cAC9C,yBAAKI,UAAWC,IAAEoE,aACd,kBAACC,EAAA,EAAD,CAAOC,UAAW9D,IACd+D,KAAK,cACLC,YAAY,yBACZC,SAAU,CAACC,IAAUtB,MAE7B,yBAAKrD,UAAWC,IAAE2E,aACd,mDAQDrB,I,QCpBAsB,EAFUtG,aAjBH,SAACV,GAEnB,MAAO,CACH6F,MAAO7F,EAAMiH,YAAYpB,MACzBS,YAAatG,EAAMiH,YAAYX,gBAId,SAACY,GAEtB,MAAO,CACHb,QAAS,SAACC,GACNY,EAASC,YAAqBb,QAKjB5F,CAA6CgF,GCHvD0B,EAdC,SAAC7G,GACb,OACI,0BAAM4B,UAAWC,IAAEiF,aACf,kBAAC,EAAD,CAAanD,UAAW3D,EAAM2D,UAC1BV,QAASjD,EAAMiD,QACfxB,QAASzB,EAAMyB,QACff,OAAQV,EAAMU,OACdM,aAAchB,EAAMgB,aACpB4C,YAAa5D,EAAM4D,cACvB,kBAAC,EAAD,Q,wBCRNmD,E,yLAGE,IAAIC,EAASjH,KAAKC,MAAMiH,MAAMC,OAAOF,OAChCA,IACDA,EAASjH,KAAKC,MAAMmH,mBAGhBpH,KAAKC,MAAMoH,QAAQC,KAAK,UAGhCtH,KAAKC,MAAMsH,eAAeN,GAC1BjH,KAAKC,MAAMuH,UAAUP,K,0CAIrBjH,KAAKyH,mB,yCAGUC,GACX1H,KAAKC,MAAMiH,MAAMC,OAAOF,QAAUS,EAAUR,MAAMC,OAAOF,QACzDjH,KAAKyH,mB,+BAMT,OAAO,kBAAC,EAAD,iBAAazH,KAAKC,MAAlB,CACHiD,SAAUlD,KAAKC,MAAMiH,MAAMC,OAAOF,OAClCvF,QAAS1B,KAAKC,MAAMyB,QACpBf,OAAQX,KAAKC,MAAMU,OACnBM,aAAcjB,KAAKC,MAAMgB,aACzB2C,UAAW5D,KAAKC,MAAM2D,iB,GAhCHzD,IAAML,WAmCrC6H,QAAQC,MAUOC,sBACXzH,aATkB,SAACV,GAAD,MAAY,CAC9BgC,QAAShC,EAAMiH,YAAYjF,QAC3Bf,OAAQjB,EAAMiH,YAAYhG,OAC1ByG,iBAAkB1H,EAAME,KAAKqH,OAC7BtH,OAAQD,EAAME,KAAKD,UAMf,CAAE4H,mBAAgBC,cAAWvG,iBAAc2C,cAAWC,kBAC1DiE,IACAjI,IAJWgI,CAKbb","file":"static/js/3.03d0e4f4.chunk.js","sourcesContent":[" import React from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nlet mapStateToPropsForRedirect = (state) => ({\n    isAuth: state.auth.isAuth\n})\n\n export const withAuthRedirect = (Component) => {\n\n     class RedirectComponent extends React.Component {\n         render() {\n             if(!this.props.isAuth) return <Redirect to='/login' />\n\n             return <Component {...this.props} />\n         }\n     }\n\n     \n    \n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\n    \n     return ConnectedAuthRedirectComponent;\n }","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainContent\":\"Profile_mainContent__3XrV5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__2ifKf\",\"posts\":\"MyPosts_posts__3tZ1c\",\"postsBlock2\":\"MyPosts_postsBlock2__2k2pC\",\"postsBlock1\":\"MyPosts_postsBlock1__3UVd1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__ihtu9\",\"itemPost\":\"Post_itemPost__hn1tP\",\"itemLike\":\"Post_itemLike__3zHlN\",\"like\":\"Post_like__oViQh\"};","import React, { useState, useEffect } from 'react';\n\nconst ProfileStatusWithHooks = (props) => {\n\n    let [editMode, setEditMode] = useState(false);\n    let [status, setStatus] = useState(props.status);\n    //Значение false хранится где-то на стороне реакта\n    //useState возвращает массив и в нем сидят 2 элемента: \n    //значения и колбэк функция, которая эти значения устанавливает\n\n    useEffect( () => {\n        setStatus(props.status);\n    }, [props.status]);\n\n    const activateEditMode = () => {\n        setEditMode(true);\n    }\n\n    const deactivateEditMode = () => {\n        setEditMode(false);\n        props.updateStatus(status);\n    }\n\n   const  onStatusChange = (e) => {\n        setStatus(e.currentTarget.value);\n    }\n\n    return (\n        <div>\n            {!editMode &&\n                <div>\n                    <span onDoubleClick={activateEditMode}>{\n                        props.status || 'No status'}\n                    </span>\n                </div>\n            }\n\n            {editMode &&\n                <div>\n                    <input autoFocus={true}\n                            onBlur={deactivateEditMode}\n                            onChange={onStatusChange}\n                            value={status}>\n                    </input>\n                </div>\n            }\n        </div>\n    )\n}\n\n\nexport default ProfileStatusWithHooks;\n\n","import React from 'react';\nimport { reduxForm } from 'redux-form';\nimport { createField, Input, Textarea } from '../../common/FormsControls/FormsControls';\nimport s from '../../common/FormsControls/FormsControls.module.css'\n\n\nconst ProfileDataForm = ({ handleSubmit, profile, error }) => {\n    return <form onSubmit={handleSubmit}>\n        <div><button>Save</button></div>\n\n        {error && <div className={s.formSummaryError}> {error} </div>}\n\n        <span className={s.userName}> {createField('Full name', 'fullName', [], Input)}</span>\n\n        <div className={s.userInfo}>\n\n            <ul className={s.listInfo}>\n                <li>\n                    <b>Looking for a job: </b> {createField('', 'lookingForAJob', [], Input, { type: 'checkbox' })}\n                </li>\n                <li>\n                    <b>My professional skills: </b> {createField('My professional skills', 'lookingForAJobDescription', [], Textarea)}\n                </li>\n                <li>\n                    <b>About me:</b> {profile.aboutMe}\n                    {createField('About me', 'aboutMe', [], Textarea)}\n                </li>\n            </ul>\n        </div>\n        <div className={s.userContact}>{profile.website}\n            <ul className={s.profileInfoContacts}>\n                {Object.keys(profile.contacts).map(key => {\n                    return <div className={s.contact}>\n                        <b>{key}{createField(key, 'contacts.' + key, [], Input)} </b>\n                    </div>\n                })}\n            </ul>\n        </div>\n    </form>\n}\n\nconst ProfileDataFormReduxForm = reduxForm({ form: 'edit-profile' })(ProfileDataForm);\n\n\nexport default ProfileDataFormReduxForm;","import React, { useState } from 'react';\nimport s from './ProfileInfo.module.css';\nimport Preloader from '../../common/Preloader/Preloader';\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks';\nimport userPhoto from '../../../assets/images/base-avatar.png';\nimport ProfileDataForm from './ProfileDataForm';\n\n\nconst ProfileInfo = ({ profile, status, updateStatus, isOwner, savePhoto, saveProfile }) => {\n    let [editMode, setEditMode] = useState(false);\n\n    if (!profile) {\n        return <Preloader />\n    }\n\n    const onMainPhotoSelected = (e) => {\n        if (e.target.files.length) {\n            savePhoto(e.target.files[0]);\n        }\n    }\n\n    const onSubmit = (formData) => {\n        saveProfile(formData).then(\n            () => {\n                setEditMode(false);\n            }\n        );\n    }\n\n    return (\n        <div className={s.background}>\n            <div className={s.userAvatar}>\n                <img src={profile.photos.large || userPhoto} alt=\"Freddy\"></img>\n                {isOwner && <input type=\"file\" onChange={onMainPhotoSelected} />}\n            </div>\n            { editMode ? <ProfileDataForm initialValues={profile} profile={profile} onSubmit={onSubmit} isOwner={isOwner} />\n                : <ProfileData goToEditMode={() => { setEditMode(true) }} profile={profile} />}\n\n            <ProfileStatusWithHooks status={status} updateStatus={updateStatus} />\n\n        </div>\n    )\n}\n\nconst ProfileData = ({ profile, isOwner, goToEditMode }) => {\n    return <div>\n        {isOwner ?? <div><button onClick={goToEditMode}>Edit</button></div>}\n\n        <span className={s.userName}>{profile.fullName}</span>\n\n        <div className={s.userInfo}>\n\n            <ul className={s.listInfo}>\n                <li>\n                    <b>Looking for a job: </b>{profile.lookingForAJob ? 'yes' : 'no'}\n                </li>\n                <li>\n                    {profile.lookingForAJob && <div><b>My professional skills: </b> {profile.lookingForAJobDescription}</div>}\n                </li>\n                <li>\n                    <b>About me:</b> {profile.aboutMe}\n                </li>\n            </ul>\n        </div>\n        <div className={s.userContact}>{profile.website}\n            <ul className={s.profileInfoContacts}>\n                {Object.keys(profile.contacts).map(key => {\n                    return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key]} />\n                })}\n            </ul>\n        </div>\n    </div>\n}\n\n\n\nexport const Contact = ({ contactTitle, contactValue }) => {\n    return <li><b>{contactTitle}</b>: {contactValue}</li>\n}\n\nexport default ProfileInfo;\n\n","import React from 'react';\nimport s from './Post.module.css';\n\nconst Post = (props) => {\n    return (\n        <li className={s.item}>\n            <div className={s.itemLike}>\n                <img src=\"https://lamcdn.net/furfurmag.ru/post-cover/PYMgsmfOiI0s9C3k8dwZ8Q-default.jpg\" alt=\"Аватарка Фредди\" />\n                <span className={s.like}>Like {props.like}</span>\n            </div>\n            <div className={s.itemPost}>\n                {props.message}\n            </div>\n            \n        </li>\n    );\n}\n\nexport default Post;","import React from 'react';\nimport s from './MyPosts.module.css';\nimport Post from './Post/Post';\nimport { Field, reduxForm } from 'redux-form';\nimport { required, maxLengthCreator } from '../../../utils/validators/validators';\nimport { Textarea } from '../../common/FormsControls/FormsControls';\n\nconst maxLength10 = maxLengthCreator(10);\n\nconst MyPosts = React.memo( props => {\n\n    let postsElements = [...props.posts].reverse().map(m => <Post key={props.id} message={m.message} like={m.likesCount} id={m.id} />)\n    let addNewPost = (values) => {\n        props.addPost(values.newPostText);\n    }\n\n    return (\n        <div className={s.postsBlock}>\n            <h3>My posts</h3>\n            <AddPostFormRadux onSubmit={addNewPost} />\n            <ul className={s.posts}>\n                {postsElements}\n            </ul>\n        </div>\n    );\n})\n    \n\nconst AddPostsForm = (props) => {\n    return (\n        <form className={s.postsBlockAdd} onSubmit={props.handleSubmit}>\n            <div className={s.postsBlock1}>\n                <Field component={Textarea}\n                    name='newPostText'\n                    placeholder='Hi, how are you sleep?'\n                    validate={[required, maxLength10]} />\n            </div>\n            <div className={s.postsBlock2}>\n                <button> Add post </button>\n            </div>\n        </form>\n    )\n}\n\nconst AddPostFormRadux = reduxForm({ form: 'ProfileAddNewPostForm' })(AddPostsForm);\n\nexport default MyPosts;","import React from 'react';\nimport { addPostActionCreator } from '../../../redux/profile-reducer';\nimport MyPosts from './MyPosts';\nimport { connect } from 'react-redux';\n\n\n\nlet mapStateToProps = (state) => {\n\n    return {\n        posts: state.profilePage.posts,\n        newPostText: state.profilePage.newPostText \n    }\n}\n\nlet mapDispatchToProps = (dispatch) => {\n\n    return {\n        addPost: (newPostText) => {\n            dispatch(addPostActionCreator(newPostText));\n        }\n    }\n}\n\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\n\nexport default MyPostsContainer;\n\n","import React from 'react';\nimport s from './Profile.module.css';\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\n\n\n\nconst Profile = (props) => {\n    return (\n        <main className={s.mainContent}>\n            <ProfileInfo savePhoto={props.savePhoto}\n                isOwner={props.isOwner}\n                profile={props.profile}\n                status={props.status}\n                updateStatus={props.updateStatus}\n                saveProfile={props.saveProfile} />\n            <MyPostsContainer />\n        </main>\n    )\n}\n\nexport default Profile;\n\n","import React from 'react';\nimport Profile from './Profile';\nimport { getUserProfile, getStatus, updateStatus, savePhoto, saveProfile } from '../../redux/profile-reducer';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { withAuthRedirect } from '../../hoc/WithAuthRedirect';\nimport { compose } from 'redux';\n\nclass ProfileContainer extends React.Component {\n\n    refreshProfile() {\n        let userId = this.props.match.params.userId;\n        if (!userId) {\n            userId = this.props.authorizedUserId;\n            if (!userId) {\n                //Не самое лучшее решение, но по-быструхе можно так сделать\n                this.props.history.push(\"/login\");\n            }\n        }\n        this.props.getUserProfile(userId);\n        this.props.getStatus(userId);\n    }\n\n    componentDidMount() {\n        this.refreshProfile();\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.match.params.userId != prevProps.match.params.userId) {\n            this.refreshProfile();\n        }\n    }\n\n    render() {\n\n        return <Profile {...this.props}\n            isOwner={!this.props.match.params.userId}\n            profile={this.props.profile}\n            status={this.props.status}\n            updateStatus={this.props.updateStatus}\n            savePhoto={this.props.savePhoto} />\n    }\n}\nconsole.log()\n\nlet mapStateToProps = (state) => ({\n    profile: state.profilePage.profile,\n    status: state.profilePage.status,\n    authorizedUserId: state.auth.userId,\n    isAuth: state.auth.isAuth\n})\n\n\nexport default compose(\n    connect(mapStateToProps,\n        { getUserProfile, getStatus, updateStatus, savePhoto, saveProfile }),\n    withRouter,\n    withAuthRedirect\n)(ProfileContainer);\n\n\n"],"sourceRoot":""}